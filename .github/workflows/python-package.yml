# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with pylint
      run: |
        pylint --max-line-length=100 --ignore=tests .
    - name: Test with unittest
      run: |
        python -m unittest discover

  coverage:  # New job for coverage
    runs-on: ubuntu-latest
    needs: build  # Only run after the build job completes
    strategy:
      matrix:
        python-version: ["3.13"]  # Only run for the latest Python version

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run tests with coverage
      run: |
        coverage run -m unittest discover
    - name: Generate coverage report
      run: |
        coverage report
        coverage xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-unittest
        token: ${{ secrets.CODECOV_TOKEN }} # Replace with your Codecov token